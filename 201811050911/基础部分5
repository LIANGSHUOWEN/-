//MyStack.h
const int maxstack = 10;//栈内元素个数的最大值
enum Error_code { success, underflow, overflow };//函数运行成功与否的内部标签
template <class Stack_entry>//类模板，数据类型叫Stack_entry
class MyStack
{
    public:                    //共有成员（类的所有成员函数）
        MyStack();            
        bool empty() const;
        Error_code push(const Stack_entry &item);
        Error_code pop();
        Error_code top(Stack_entry &item) const;
        Stack_entry top()const;        //重载top函数以适应不同的需要
        void setnull();//清空栈
    private:                //私有成员（数据成员）
        int count;        //计数器
        Stack_entry entry[maxstack];//用数组实现存储
};
//MyStack.cpp
#include <iostream>
#include "MyStack.h"
using namespace std;
template <class Stack_entry>
MyStack<Stack_entry>::MyStack()
/*Pre: None.
Post: The stack is initialized to be empty.*/
{
    count = 0;
}
template <class Stack_entry>
bool MyStack<Stack_entry>::empty() const
/*Pre: None.
Post: if the stack is empty, true is returned. Ohterwise
false is returned.*/
{
    bool outcome = true;
    if (count > 0) outcome = false;
    return outcome;
}
template <class Stack_entry>
Error_code MyStack<Stack_entry>::push(const Stack_entry &item)
/*Pre: None.
Post: if the stack is not full, item is added to the top
of the stack. Ohterwise an error code of overflow is returned
and the stack is left unchanged.*/
{
    Error_code outcome = success;
    if (count >= maxstack) outcome = overflow;
    else entry[count++] = item;
    return outcome;
}
template <class Stack_entry>
Error_code MyStack<Stack_entry>::pop()
/*Pre: None.
Post: If the stack is not empty, the top of the stack is
removed. If the stack is empty, an Error code of underflow
is returned.*/
{
    Error_code outcome = success;
    if (count == 0) outcome = underflow;
    else --count;
    return outcome;
}
template <class Stack_entry>
Error_code MyStack<Stack_entry>::top(Stack_entry &item) const
/*Pre: None.
Post: if the stack is not empty, the top of the stack
is returned in item. if the stack is empty, an error code
of underflow is returned.*/
{
    Error_code outcome = success;
    if (count == 0) outcome = underflow;
    else item = entry[count - 1];
    return outcome;
}
template <class Stack_entry>
Stack_entry MyStack<Stack_entry>::top()const//重载top函数以适应不同的需要
{
    if (count == 0) underflow;
    return entry[count - 1];
}
template <class Stack_entry>
void MyStack<Stack_entry>::setnull()
{
    count = 0;//与构造实现是一致的
}
//Calculator.h
using namespace std;
class Calculator
{
    private://私有成员（数据成员）
        MyStack<char> optr;//操作符栈
        MyStack<double> opnd;//操作数栈
        MyStack<char> bracket;//用于存放左括号的栈
    public://公有成员（供外界调用的成员函数，即方法）
        Calculator()//构造函数
        {
            optr.setnull();
            opnd.setnull();
            bracket.setnull();
            optr.push('#');//‘#’作为栈底哨兵
        }
        void evaluate();//利用栈结构将中缀表达式转为PRN来计算，并检查输入的合法性
        void clear()//清空计算器
        {
            optr.setnull();
            optr.setnull();
            bracket.setnull();
            optr.push('#');//与构造的实现是一致的
        }

    private://私有成员（对外隐藏的成员函数，只供内部调用）
        int lp(char op);//返回左端操作符的优先级
        int rp(char op);//返回右端操作符的优先级
        double operate(char theta, double a, double b);//进行后缀表达式的运算，返回运算结果
};
//Calculator.cpp
#include <iostream>
#include "MyStack.cpp"
#include "Calculator.h"
#include <ctype.h>//调用了isdigit和isalpha函数
using namespace std;
void Calculator::evaluate()//利用栈结构将键盘输入的中缀表达式转为RPN计算，并检查输入的正确性
{
    char ch, op, theta;//当前读入字符、操作符、运算符
    double val, a, b;//数值、左操作数、右操作数
    cin >> ch;
    op = '#';
    bool is_matched = true;//标记左右括号是否匹配
    do
    {
        while (isalpha(ch)) { cin >> ch; }//过滤非法字符输入（英文字母）
        is_matched = true;

        switch (ch)//左右括号匹配检查
        {
        case '(': bracket.push(ch); break;//左括号入栈
        case ')': if (bracket.empty())
            //右括号没有已入栈的左括号来匹配时，输入非法
            is_matched = false;
                  else
                  {
                      bracket.pop();  is_matched = true;
                  }//匹配时，弹出一个左括号
                  break;
        default: break;//非括号的字符一律过滤掉
        }
        while (is_matched)//右括号匹配时，执行中缀表达式运算
        {
            if (isdigit(ch))//当前字符为数字时，将它放入操作数栈
            {//isdigit遇到多位数会自动识别吗？
                cin.putback(ch);//答：当然不能。因为isdigt的参数是char型的，它只能判断一位字符
                cin >> val;//这也是为什么要cin.putback(ch)再cin>>out了。cin的功能很强大，自动匹配数据类型，而不用scanf的各种格式化输入符
                opnd.push(val);
                cin >> ch; break;
            }
            else if (lp(op) < rp(ch))
            {//当前操作符优先级高于栈顶操作符时，入栈
                optr.push(ch);
                op = optr.top();
                cin >> ch; break;
            }
            else if (lp(op) == rp(ch))
            {//当前操作符优先级等于栈顶操作符时，当前栈顶操作符出栈
                optr.pop();
                op = optr.top();
                cin >> ch; break;
            }
            else if (lp(op) > rp(ch))
            {//当前操作符优先级低于栈顶，将栈顶取出进行运算，再将结果放回操作数栈
                theta = op;  optr.pop();
                b = opnd.top();  opnd.pop();
                a = opnd.top();  opnd.pop();//注意两个操作数的出栈顺序
                opnd.push(operate(theta, a, b));
                op = optr.top();
                if ((ch == ')') && (op == '('))//解决左右括号匹配后的问题
                {
                    optr.pop();  op = optr.top();//左括号出栈
                    cin >> ch;//刷新当前字符（避免对右括号二次判断）
                    if (ch == '(') is_matched = false;//右括号紧邻左括号，报错
                }
                break;
            }
        }
        if (is_matched == false || (op == '(' && ch == '#'))
        {//最后还剩没配上对的左括号，或者右括号没有左括号来匹配，则输入非法
            cout << "Bad match." << endl;
            ch = op = '#';
            is_matched = false;
        }
    } while (ch != '#' || op != '#');

    if (is_matched == true) cout << '=' << opnd.top();//循环结束后，结果在操作数栈顶
    else {
        cout << "sorry, cannot compute this expression." << endl;
    }
}
int Calculator::lp(char op)//返回左端操作符的优先级
{
    int prior;//优先级
    switch (op)
    {
    case '+'://将优先级表的内容写入
    case '-': prior = 3; break;
    case '*':
    case '/': prior = 5; break;
    case '(': prior = 1; break;
    case ')': prior = 6; break;
    case '#': prior = 0; break;
    }
    return prior;
}
int Calculator::rp(char op)//返回右端操作符的优先级
{
    int prior;//优先级
    switch (op)
    {
    case '+':
    case '-': prior = 2; break;
    case '*':
    case '/': prior = 4; break;
    case '(': prior = 6; break;
    case ')': prior = 1; break;
    case '#': prior = 0; break;
    }
    return prior;
}
double Calculator::operate(char theta, double a, double b)
//进行后缀表达式的运算，返回运算结果
{
    switch (theta)
    {
    case '+': return a + b;
    case '-': return a - b;
    case '*': return a*b;
    case '/': return a / b;
    default: return 0;
    }
}
//main.cpp
#include <iostream>
#include "MyStack.cpp"
#include "Calculator.h"
using namespace std;
int main()
{
    Calculator calc1;//创建计算器对象
    do
    {
        calc1.clear();
        cout << "Please input an expression, ended with a '#'" << endl;
        calc1.evaluate();//计算表达式并显示结果
        //cout << endl << "Would you like to continue? [y/n]" << endl;
        fflush(stdin);
    } while (cin.get() == 'y');

    return 0;
}
